classdef SetDecoupledTargetRequest < ros.Message
    %SetDecoupledTargetRequest MATLAB implementation of proc_control/SetDecoupledTargetRequest
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'proc_control/SetDecoupledTargetRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'de8009e241db4e75212304aebbb240d7' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        X
        Y
        Z
        ROLL
        PITCH
        YAW
        KeepX
        KeepY
        KeepZ
        KeepROLL
        KeepPITCH
        KeepYAW
    end
    
    properties (Constant, Hidden)
        PropertyList = {'KeepPITCH', 'KeepROLL', 'KeepX', 'KeepY', 'KeepYAW', 'KeepZ', 'PITCH', 'ROLL', 'X', 'Y', 'YAW', 'Z'} % List of non-constant message properties
        ROSPropertyList = {'keepPITCH', 'keepROLL', 'keepX', 'keepY', 'keepYAW', 'keepZ', 'PITCH', 'ROLL', 'X', 'Y', 'YAW', 'Z'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SetDecoupledTargetRequest(msg)
            %SetDecoupledTargetRequest Construct the message object SetDecoupledTargetRequest
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function x = get.X(obj)
            %get.X Get the value for property X
            x = double(obj.JavaMessage.getX);
        end
        
        function set.X(obj, x)
            %set.X Set the value for property X
            validateattributes(x, {'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'X');
            
            obj.JavaMessage.setX(x);
        end
        
        function y = get.Y(obj)
            %get.Y Get the value for property Y
            y = double(obj.JavaMessage.getY);
        end
        
        function set.Y(obj, y)
            %set.Y Set the value for property Y
            validateattributes(y, {'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'Y');
            
            obj.JavaMessage.setY(y);
        end
        
        function z = get.Z(obj)
            %get.Z Get the value for property Z
            z = double(obj.JavaMessage.getZ);
        end
        
        function set.Z(obj, z)
            %set.Z Set the value for property Z
            validateattributes(z, {'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'Z');
            
            obj.JavaMessage.setZ(z);
        end
        
        function roll = get.ROLL(obj)
            %get.ROLL Get the value for property ROLL
            roll = double(obj.JavaMessage.getROLL);
        end
        
        function set.ROLL(obj, roll)
            %set.ROLL Set the value for property ROLL
            validateattributes(roll, {'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'ROLL');
            
            obj.JavaMessage.setROLL(roll);
        end
        
        function pitch = get.PITCH(obj)
            %get.PITCH Get the value for property PITCH
            pitch = double(obj.JavaMessage.getPITCH);
        end
        
        function set.PITCH(obj, pitch)
            %set.PITCH Set the value for property PITCH
            validateattributes(pitch, {'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'PITCH');
            
            obj.JavaMessage.setPITCH(pitch);
        end
        
        function yaw = get.YAW(obj)
            %get.YAW Get the value for property YAW
            yaw = double(obj.JavaMessage.getYAW);
        end
        
        function set.YAW(obj, yaw)
            %set.YAW Set the value for property YAW
            validateattributes(yaw, {'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'YAW');
            
            obj.JavaMessage.setYAW(yaw);
        end
        
        function keepx = get.KeepX(obj)
            %get.KeepX Get the value for property KeepX
            keepx = logical(obj.JavaMessage.getKeepX);
        end
        
        function set.KeepX(obj, keepx)
            %set.KeepX Set the value for property KeepX
            validateattributes(keepx, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'KeepX');
            
            obj.JavaMessage.setKeepX(keepx);
        end
        
        function keepy = get.KeepY(obj)
            %get.KeepY Get the value for property KeepY
            keepy = logical(obj.JavaMessage.getKeepY);
        end
        
        function set.KeepY(obj, keepy)
            %set.KeepY Set the value for property KeepY
            validateattributes(keepy, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'KeepY');
            
            obj.JavaMessage.setKeepY(keepy);
        end
        
        function keepz = get.KeepZ(obj)
            %get.KeepZ Get the value for property KeepZ
            keepz = logical(obj.JavaMessage.getKeepZ);
        end
        
        function set.KeepZ(obj, keepz)
            %set.KeepZ Set the value for property KeepZ
            validateattributes(keepz, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'KeepZ');
            
            obj.JavaMessage.setKeepZ(keepz);
        end
        
        function keeproll = get.KeepROLL(obj)
            %get.KeepROLL Get the value for property KeepROLL
            keeproll = logical(obj.JavaMessage.getKeepROLL);
        end
        
        function set.KeepROLL(obj, keeproll)
            %set.KeepROLL Set the value for property KeepROLL
            validateattributes(keeproll, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'KeepROLL');
            
            obj.JavaMessage.setKeepROLL(keeproll);
        end
        
        function keeppitch = get.KeepPITCH(obj)
            %get.KeepPITCH Get the value for property KeepPITCH
            keeppitch = logical(obj.JavaMessage.getKeepPITCH);
        end
        
        function set.KeepPITCH(obj, keeppitch)
            %set.KeepPITCH Set the value for property KeepPITCH
            validateattributes(keeppitch, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'KeepPITCH');
            
            obj.JavaMessage.setKeepPITCH(keeppitch);
        end
        
        function keepyaw = get.KeepYAW(obj)
            %get.KeepYAW Get the value for property KeepYAW
            keepyaw = logical(obj.JavaMessage.getKeepYAW);
        end
        
        function set.KeepYAW(obj, keepyaw)
            %set.KeepYAW Set the value for property KeepYAW
            validateattributes(keepyaw, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SetDecoupledTargetRequest', 'KeepYAW');
            
            obj.JavaMessage.setKeepYAW(keepyaw);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.X = obj.X;
            cpObj.Y = obj.Y;
            cpObj.Z = obj.Z;
            cpObj.ROLL = obj.ROLL;
            cpObj.PITCH = obj.PITCH;
            cpObj.YAW = obj.YAW;
            cpObj.KeepX = obj.KeepX;
            cpObj.KeepY = obj.KeepY;
            cpObj.KeepZ = obj.KeepZ;
            cpObj.KeepROLL = obj.KeepROLL;
            cpObj.KeepPITCH = obj.KeepPITCH;
            cpObj.KeepYAW = obj.KeepYAW;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.X = strObj.X;
            obj.Y = strObj.Y;
            obj.Z = strObj.Z;
            obj.ROLL = strObj.ROLL;
            obj.PITCH = strObj.PITCH;
            obj.YAW = strObj.YAW;
            obj.KeepX = strObj.KeepX;
            obj.KeepY = strObj.KeepY;
            obj.KeepZ = strObj.KeepZ;
            obj.KeepROLL = strObj.KeepROLL;
            obj.KeepPITCH = strObj.KeepPITCH;
            obj.KeepYAW = strObj.KeepYAW;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.X = obj.X;
            strObj.Y = obj.Y;
            strObj.Z = obj.Z;
            strObj.ROLL = obj.ROLL;
            strObj.PITCH = obj.PITCH;
            strObj.YAW = obj.YAW;
            strObj.KeepX = obj.KeepX;
            strObj.KeepY = obj.KeepY;
            strObj.KeepZ = obj.KeepZ;
            strObj.KeepROLL = obj.KeepROLL;
            strObj.KeepPITCH = obj.KeepPITCH;
            strObj.KeepYAW = obj.KeepYAW;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.proc_control.SetDecoupledTargetRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.proc_control.SetDecoupledTargetRequest;
            obj.reload(strObj);
        end
    end
end
