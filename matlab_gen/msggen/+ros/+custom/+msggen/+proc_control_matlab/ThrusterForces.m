classdef ThrusterForces < ros.Message
    %ThrusterForces MATLAB implementation of proc_control_matlab/ThrusterForces
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2021 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'proc_control_matlab/ThrusterForces' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'c879e81e3617ec289d43ca5d32720451' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        T1Force
        T2Force
        T3Force
        T4Force
        T5Force
        T6Force
        T7Force
        T8Force
    end
    
    properties (Constant, Hidden)
        PropertyList = {'T1Force', 'T2Force', 'T3Force', 'T4Force', 'T5Force', 'T6Force', 'T7Force', 'T8Force'} % List of non-constant message properties
        ROSPropertyList = {'T1_Force', 'T2_Force', 'T3_Force', 'T4_Force', 'T5_Force', 'T6_Force', 'T7_Force', 'T8_Force'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ThrusterForces(msg)
            %ThrusterForces Construct the message object ThrusterForces
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function t1force = get.T1Force(obj)
            %get.T1Force Get the value for property T1Force
            t1force = int32(obj.JavaMessage.getT1Force);
        end
        
        function set.T1Force(obj, t1force)
            %set.T1Force Set the value for property T1Force
            validateattributes(t1force, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterForces', 'T1Force');
            
            obj.JavaMessage.setT1Force(t1force);
        end
        
        function t2force = get.T2Force(obj)
            %get.T2Force Get the value for property T2Force
            t2force = int32(obj.JavaMessage.getT2Force);
        end
        
        function set.T2Force(obj, t2force)
            %set.T2Force Set the value for property T2Force
            validateattributes(t2force, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterForces', 'T2Force');
            
            obj.JavaMessage.setT2Force(t2force);
        end
        
        function t3force = get.T3Force(obj)
            %get.T3Force Get the value for property T3Force
            t3force = int32(obj.JavaMessage.getT3Force);
        end
        
        function set.T3Force(obj, t3force)
            %set.T3Force Set the value for property T3Force
            validateattributes(t3force, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterForces', 'T3Force');
            
            obj.JavaMessage.setT3Force(t3force);
        end
        
        function t4force = get.T4Force(obj)
            %get.T4Force Get the value for property T4Force
            t4force = int32(obj.JavaMessage.getT4Force);
        end
        
        function set.T4Force(obj, t4force)
            %set.T4Force Set the value for property T4Force
            validateattributes(t4force, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterForces', 'T4Force');
            
            obj.JavaMessage.setT4Force(t4force);
        end
        
        function t5force = get.T5Force(obj)
            %get.T5Force Get the value for property T5Force
            t5force = int32(obj.JavaMessage.getT5Force);
        end
        
        function set.T5Force(obj, t5force)
            %set.T5Force Set the value for property T5Force
            validateattributes(t5force, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterForces', 'T5Force');
            
            obj.JavaMessage.setT5Force(t5force);
        end
        
        function t6force = get.T6Force(obj)
            %get.T6Force Get the value for property T6Force
            t6force = int32(obj.JavaMessage.getT6Force);
        end
        
        function set.T6Force(obj, t6force)
            %set.T6Force Set the value for property T6Force
            validateattributes(t6force, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterForces', 'T6Force');
            
            obj.JavaMessage.setT6Force(t6force);
        end
        
        function t7force = get.T7Force(obj)
            %get.T7Force Get the value for property T7Force
            t7force = int32(obj.JavaMessage.getT7Force);
        end
        
        function set.T7Force(obj, t7force)
            %set.T7Force Set the value for property T7Force
            validateattributes(t7force, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterForces', 'T7Force');
            
            obj.JavaMessage.setT7Force(t7force);
        end
        
        function t8force = get.T8Force(obj)
            %get.T8Force Get the value for property T8Force
            t8force = int32(obj.JavaMessage.getT8Force);
        end
        
        function set.T8Force(obj, t8force)
            %set.T8Force Set the value for property T8Force
            validateattributes(t8force, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterForces', 'T8Force');
            
            obj.JavaMessage.setT8Force(t8force);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.T1Force = obj.T1Force;
            cpObj.T2Force = obj.T2Force;
            cpObj.T3Force = obj.T3Force;
            cpObj.T4Force = obj.T4Force;
            cpObj.T5Force = obj.T5Force;
            cpObj.T6Force = obj.T6Force;
            cpObj.T7Force = obj.T7Force;
            cpObj.T8Force = obj.T8Force;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.T1Force = strObj.T1Force;
            obj.T2Force = strObj.T2Force;
            obj.T3Force = strObj.T3Force;
            obj.T4Force = strObj.T4Force;
            obj.T5Force = strObj.T5Force;
            obj.T6Force = strObj.T6Force;
            obj.T7Force = strObj.T7Force;
            obj.T8Force = strObj.T8Force;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.T1Force = obj.T1Force;
            strObj.T2Force = obj.T2Force;
            strObj.T3Force = obj.T3Force;
            strObj.T4Force = obj.T4Force;
            strObj.T5Force = obj.T5Force;
            strObj.T6Force = obj.T6Force;
            strObj.T7Force = obj.T7Force;
            strObj.T8Force = obj.T8Force;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.proc_control_matlab.ThrusterForces.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.proc_control_matlab.ThrusterForces;
            obj.reload(strObj);
        end
    end
end
