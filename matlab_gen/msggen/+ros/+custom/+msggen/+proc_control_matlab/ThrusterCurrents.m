classdef ThrusterCurrents < ros.Message
    %ThrusterCurrents MATLAB implementation of proc_control_matlab/ThrusterCurrents
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2021 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'proc_control_matlab/ThrusterCurrents' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f7c660ebbd699b22a4dc583e208872f9' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        T1Current
        T2Current
        T3Current
        T4Current
        T5Current
        T6Current
        T7Current
        T8Current
    end
    
    properties (Constant, Hidden)
        PropertyList = {'T1Current', 'T2Current', 'T3Current', 'T4Current', 'T5Current', 'T6Current', 'T7Current', 'T8Current'} % List of non-constant message properties
        ROSPropertyList = {'T1_Current', 'T2_Current', 'T3_Current', 'T4_Current', 'T5_Current', 'T6_Current', 'T7_Current', 'T8_Current'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ThrusterCurrents(msg)
            %ThrusterCurrents Construct the message object ThrusterCurrents
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function t1current = get.T1Current(obj)
            %get.T1Current Get the value for property T1Current
            t1current = int32(obj.JavaMessage.getT1Current);
        end
        
        function set.T1Current(obj, t1current)
            %set.T1Current Set the value for property T1Current
            validateattributes(t1current, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterCurrents', 'T1Current');
            
            obj.JavaMessage.setT1Current(t1current);
        end
        
        function t2current = get.T2Current(obj)
            %get.T2Current Get the value for property T2Current
            t2current = int32(obj.JavaMessage.getT2Current);
        end
        
        function set.T2Current(obj, t2current)
            %set.T2Current Set the value for property T2Current
            validateattributes(t2current, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterCurrents', 'T2Current');
            
            obj.JavaMessage.setT2Current(t2current);
        end
        
        function t3current = get.T3Current(obj)
            %get.T3Current Get the value for property T3Current
            t3current = int32(obj.JavaMessage.getT3Current);
        end
        
        function set.T3Current(obj, t3current)
            %set.T3Current Set the value for property T3Current
            validateattributes(t3current, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterCurrents', 'T3Current');
            
            obj.JavaMessage.setT3Current(t3current);
        end
        
        function t4current = get.T4Current(obj)
            %get.T4Current Get the value for property T4Current
            t4current = int32(obj.JavaMessage.getT4Current);
        end
        
        function set.T4Current(obj, t4current)
            %set.T4Current Set the value for property T4Current
            validateattributes(t4current, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterCurrents', 'T4Current');
            
            obj.JavaMessage.setT4Current(t4current);
        end
        
        function t5current = get.T5Current(obj)
            %get.T5Current Get the value for property T5Current
            t5current = int32(obj.JavaMessage.getT5Current);
        end
        
        function set.T5Current(obj, t5current)
            %set.T5Current Set the value for property T5Current
            validateattributes(t5current, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterCurrents', 'T5Current');
            
            obj.JavaMessage.setT5Current(t5current);
        end
        
        function t6current = get.T6Current(obj)
            %get.T6Current Get the value for property T6Current
            t6current = int32(obj.JavaMessage.getT6Current);
        end
        
        function set.T6Current(obj, t6current)
            %set.T6Current Set the value for property T6Current
            validateattributes(t6current, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterCurrents', 'T6Current');
            
            obj.JavaMessage.setT6Current(t6current);
        end
        
        function t7current = get.T7Current(obj)
            %get.T7Current Get the value for property T7Current
            t7current = int32(obj.JavaMessage.getT7Current);
        end
        
        function set.T7Current(obj, t7current)
            %set.T7Current Set the value for property T7Current
            validateattributes(t7current, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterCurrents', 'T7Current');
            
            obj.JavaMessage.setT7Current(t7current);
        end
        
        function t8current = get.T8Current(obj)
            %get.T8Current Get the value for property T8Current
            t8current = int32(obj.JavaMessage.getT8Current);
        end
        
        function set.T8Current(obj, t8current)
            %set.T8Current Set the value for property T8Current
            validateattributes(t8current, {'numeric'}, {'nonempty', 'scalar'}, 'ThrusterCurrents', 'T8Current');
            
            obj.JavaMessage.setT8Current(t8current);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.T1Current = obj.T1Current;
            cpObj.T2Current = obj.T2Current;
            cpObj.T3Current = obj.T3Current;
            cpObj.T4Current = obj.T4Current;
            cpObj.T5Current = obj.T5Current;
            cpObj.T6Current = obj.T6Current;
            cpObj.T7Current = obj.T7Current;
            cpObj.T8Current = obj.T8Current;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.T1Current = strObj.T1Current;
            obj.T2Current = strObj.T2Current;
            obj.T3Current = strObj.T3Current;
            obj.T4Current = strObj.T4Current;
            obj.T5Current = strObj.T5Current;
            obj.T6Current = strObj.T6Current;
            obj.T7Current = strObj.T7Current;
            obj.T8Current = strObj.T8Current;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.T1Current = obj.T1Current;
            strObj.T2Current = obj.T2Current;
            strObj.T3Current = obj.T3Current;
            strObj.T4Current = obj.T4Current;
            strObj.T5Current = obj.T5Current;
            strObj.T6Current = obj.T6Current;
            strObj.T7Current = obj.T7Current;
            strObj.T8Current = obj.T8Current;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.proc_control_matlab.ThrusterCurrents.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.proc_control_matlab.ThrusterCurrents;
            obj.reload(strObj);
        end
    end
end
